\input texinfo   @c -*-texinfo-*-
@comment %**start of header
@setfilename machinery.info
@finalout
@include version.texi
@settitle Machinery Manual @value{VERSION}
@documentencoding UTF-8
@comment %**end of header

@dircategory Software libraries
@direntry
* Machinery: (machinery).       A code-generation library.
@end direntry

@copying
This manual is in the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute
this manual for any purpose, commercial or non-commercial, and by any means.
@end copying

@titlepage
@title Machinery
@subtitle for version @value{VERSION}, @value{UPDATED-MONTH}
@author by Arto Bendiken (@email{arto@@bendiken.net})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Machinery Manual
@end ifnottex

@menu
* Overview of Machinery::
* ARM Code Generation::
* MIPS Code Generation::
* PowerPC Code Generation::
* SPARC Code Generation::
* x86 Code Generation::
* Concept Index::
* Function and Type Index::
@end menu

@comment *********************************************************************

@node Overview of Machinery
@chapter Overview of Machinery

Machinery is a portable C library for cross-architecture code generation.
It is designed to be useful for writing compilers, assemblers, linkers,
disassemblers, emulators, and other low-level toolchain machinery.

@section Installation

@section Error Handling
@cindex error handling
@findex errno

@comment *********************************************************************

@node ARM Code Generation
@chapter ARM Code Generation
@cindex ARM

@section ARM Overview
@cindex architecture, ARM

@section ARM Registers
@cindex registers, ARM

@section ARM Instruction Formats
@cindex instruction format, ARM

@section ARM Instructions
@cindex instruction set, ARM

@comment *********************************************************************

@node MIPS Code Generation
@chapter MIPS Code Generation
@cindex MIPS

@section MIPS Overview
@cindex architecture, MIPS
@cindex MIPS32
@cindex MIPS64

@acronym{MIPS, Microprocessor without Interlocked Pipeline Stages} is a RISC
instruction set architecture first introduced in 1985.

@section MIPS Registers
@cindex registers, MIPS
@findex mips_reg_t

MIPS provides 32 general-purpose registers and 32 floating-point registers.

@subsection General-purpose registers
@multitable @columnfractions .25 .15 .10
@headitem Constant @tab Mnemonic @tab Number
@item @code{MIPS_REG_ZERO} @tab @code{$zero} @tab 0
@item @code{MIPS_REG_AT}   @tab @code{$at} @tab 1
@item @code{MIPS_REG_V0}   @tab @code{$v0} @tab 2
@item @code{MIPS_REG_V1}   @tab @code{$v1} @tab 3
@item @code{MIPS_REG_A0}   @tab @code{$a0} @tab 4
@item @code{MIPS_REG_A1}   @tab @code{$a1} @tab 5
@item @code{MIPS_REG_A2}   @tab @code{$a2} @tab 6
@item @code{MIPS_REG_A3}   @tab @code{$a3} @tab 7
@item @code{MIPS_REG_T0}   @tab @code{$t0} @tab 8
@item @code{MIPS_REG_T1}   @tab @code{$t1} @tab 9
@item @code{MIPS_REG_T2}   @tab @code{$t2} @tab 10
@item @code{MIPS_REG_T3}   @tab @code{$t3} @tab 11
@item @code{MIPS_REG_T4}   @tab @code{$t4} @tab 12
@item @code{MIPS_REG_T5}   @tab @code{$t5} @tab 13
@item @code{MIPS_REG_T6}   @tab @code{$t6} @tab 14
@item @code{MIPS_REG_T7}   @tab @code{$t7} @tab 15
@item @code{MIPS_REG_S0}   @tab @code{$s0} @tab 16
@item @code{MIPS_REG_S1}   @tab @code{$s1} @tab 17
@item @code{MIPS_REG_S2}   @tab @code{$s2} @tab 18
@item @code{MIPS_REG_S3}   @tab @code{$s3} @tab 19
@item @code{MIPS_REG_S4}   @tab @code{$s4} @tab 20
@item @code{MIPS_REG_S5}   @tab @code{$s5} @tab 21
@item @code{MIPS_REG_S6}   @tab @code{$s6} @tab 22
@item @code{MIPS_REG_S7}   @tab @code{$s7} @tab 23
@item @code{MIPS_REG_T8}   @tab @code{$t8} @tab 24
@item @code{MIPS_REG_T9}   @tab @code{$t9} @tab 25
@item @code{MIPS_REG_K0}   @tab @code{$k0} @tab 26
@item @code{MIPS_REG_K1}   @tab @code{$k1} @tab 27
@item @code{MIPS_REG_GP}   @tab @code{$gp} @tab 28
@item @code{MIPS_REG_SP}   @tab @code{$sp} @tab 29
@item @code{MIPS_REG_FP}   @tab @code{$fp} @tab 30
@item @code{MIPS_REG_RA}   @tab @code{$ra} @tab 31
@end multitable

@subsection Floating-point registers

@section MIPS Instruction Formats
@cindex instruction format, MIPS
@findex mips_insn_t

MIPS uses 32-bit fixed-length instructions, and all instructions can be
divided into three distinct instruction formats: R, I, and J. These are
each described in the following subsections.

@subsection R-format
@findex mips_r_insn_t

@subsection I-format
@findex mips_i_insn_t

@subsection J-format
@findex mips_j_insn_t

@section MIPS Instructions
@cindex instruction set, MIPS

@subsection General-purpose instructions

@unnumberedsubsubsec NOP
@deftypefn {Function} ssize_t mips_emit_nop (mips_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SSNOP
@deftypefn {Function} ssize_t mips_emit_ssnop (mips_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SYNC
@deftypefn {Function} ssize_t mips_emit_sync (mips_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec ADD
@deftypefn {Function} ssize_t mips_emit_add (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec ADDU
@deftypefn {Function} ssize_t mips_emit_addu (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec ADDI
@deftypefn {Function} ssize_t mips_emit_addi (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_imm_t @var{imm})
@end deftypefn

@unnumberedsubsubsec ADDIU
@deftypefn {Function} ssize_t mips_emit_addiu (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_imm_t @var{imm})
@end deftypefn

@unnumberedsubsubsec SUB
@deftypefn {Function} ssize_t mips_emit_sub (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec SUBU
@deftypefn {Function} ssize_t mips_emit_subu (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec MULT
@deftypefn {Function} ssize_t mips_emit_mult (mips_insn_t* @var{insn}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec MULTU
@deftypefn {Function} ssize_t mips_emit_multu (mips_insn_t* @var{insn}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec MUL
@deftypefn {Function} ssize_t mips_emit_mul (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec DIV
@deftypefn {Function} ssize_t mips_emit_div (mips_insn_t* @var{insn}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec DIVU
@deftypefn {Function} ssize_t mips_emit_divu (mips_insn_t* @var{insn}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec AND
@deftypefn {Function} ssize_t mips_emit_and (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec OR
@deftypefn {Function} ssize_t mips_emit_or (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec XOR
@deftypefn {Function} ssize_t mips_emit_xor (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec NOR
@deftypefn {Function} ssize_t mips_emit_nor (mips_insn_t* @var{insn}, mips_reg_t @var{rd}, mips_reg_t @var{rs}, mips_reg_t @var{rt})
@end deftypefn

@unnumberedsubsubsec J
@deftypefn {Function} ssize_t mips_emit_j (mips_insn_t* @var{insn}, mips_addr_t @var{target})
@end deftypefn

@unnumberedsubsubsec JAL
@deftypefn {Function} ssize_t mips_emit_jal (mips_insn_t* @var{insn}, mips_addr_t @var{target})
@end deftypefn

@comment *********************************************************************

@node PowerPC Code Generation
@chapter PowerPC Code Generation
@cindex PowerPC

@section PowerPC Overview
@cindex architecture, PowerPC

@section PowerPC Registers
@cindex registers, PowerPC

@section PowerPC Instruction Formats
@cindex instruction format, PowerPC

@section PowerPC Instructions
@cindex instruction set, PowerPC

@comment *********************************************************************

@node SPARC Code Generation
@chapter SPARC Code Generation
@cindex SPARC

@section SPARC Overview
@cindex architecture, SPARC

@section SPARC Registers
@cindex registers, SPARC

@section SPARC Instruction Formats
@cindex instruction format, SPARC

@section SPARC Instructions
@cindex instruction set, SPARC

@comment *********************************************************************

@node x86 Code Generation
@chapter x86 Code Generation
@cindex x86

@section x86 Overview
@cindex architecture, x86
@cindex x86-32
@cindex x86-64

TODO

@section x86 Registers
@cindex registers, x86

@subsection General-purpose registers

TODO

@section x86 Instruction Formats
@cindex instruction format, x86
@findex x86_insn_t

TODO

@section x86 Instructions
@cindex instruction set, x86

@subsection General-purpose instructions

@unnumberedsubsubsec AAA
@sc{ASCII Adjust After Addition}
@deftypefn {Function} ssize_t x86_emit_aaa (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec AAS
@sc{ASCII Adjust After Subtraction}
@deftypefn {Function} ssize_t x86_emit_aas (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CBW/CWDE/CDQE
@sc{Convert to Sign-Extended}
@deftypefn {Function} ssize_t x86_emit_cbw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_cwde (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_cdqe (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CWD/CDQ/CQO
@sc{Convert to Sign-Extended}
@deftypefn {Function} ssize_t x86_emit_cwd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_cdq (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_cqo (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CLC
@sc{Clear Carry Flag}
@deftypefn {Function} ssize_t x86_emit_clc (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CLD
@sc{Clear Direction Flag}
@deftypefn {Function} ssize_t x86_emit_cld (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CMC
@sc{Complement Carry Flag}
@deftypefn {Function} ssize_t x86_emit_cmc (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CMPSB/CMPSW/CMPSD/CMPSQ
@sc{Compare Strings}
@deftypefn {Function} ssize_t x86_emit_cmpsb (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_cmpsw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_cmpsd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_cmpsq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec DAA
@sc{Decimal Adjust after Addition}
@deftypefn {Function} ssize_t x86_emit_daa (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec DAS
@sc{Decimal Adjust after Subtraction}
@deftypefn {Function} ssize_t x86_emit_das (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec INSB/INSW/INSD
@sc{Input String}
@deftypefn {Function} ssize_t x86_emit_insb (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_insw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_insd (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec INTO
@sc{Interrupt to Overflow Vector}
@deftypefn {Function} ssize_t x86_emit_into (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec LAHF
@sc{Load Status Flags into AH Register}
@deftypefn {Function} ssize_t x86_emit_lahf (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec LEAVE
@sc{Delete Procedure Stack Frame}
@deftypefn {Function} ssize_t x86_emit_leave (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec LODSB/LODSW/LODSD/LODSQ
@sc{Load String}
@deftypefn {Function} ssize_t x86_emit_lodsb (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_lodsw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_lodsd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_lodsq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec MOVSB/MOVSW/MOVSD/MOVSQ
@sc{Move String}
@deftypefn {Function} ssize_t x86_emit_movsb (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_movsw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_movsd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_movsq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec NOP
@sc{No Operation}
@deftypefn {Function} ssize_t x86_emit_nop (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec OUTSB/OUTSW/OUTSD
@sc{Output String}
@deftypefn {Function} ssize_t x86_emit_outsb (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_outsw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_outsd (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec POPA/POPAD
@sc{POP All GPRs}
@deftypefn {Function} ssize_t x86_emit_popa (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_popad (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec POPF/POPFD/POPFQ
@sc{POP to rFLAGS}
@deftypefn {Function} ssize_t x86_emit_popf (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_popfd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_popfq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec PUSHA/PUSHAD
@sc{Push All GPRs onto Stack}
@deftypefn {Function} ssize_t x86_emit_pusha (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_pushad (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec PUSHF/PUSHFD/PUSHFQ
@sc{Push rFLAGS onto Stack}
@deftypefn {Function} ssize_t x86_emit_pushf (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_pushfd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_pushfq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec RET
@sc{Near Return from Called Procedure}
@deftypefn {Function} ssize_t x86_emit_ret (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec RETF
@sc{Far Return from Called Procedure}
@deftypefn {Function} ssize_t x86_emit_retf (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SAHF
@sc{Store AH into Flags}
@deftypefn {Function} ssize_t x86_emit_sahf (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SCASB/SCASW/SCASD/SCASQ
@sc{Scan String}
@deftypefn {Function} ssize_t x86_emit_scasb (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_scasw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_scasd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_scasq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec STC
@sc{Set Carry Flag}
@deftypefn {Function} ssize_t x86_emit_stc (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec STD
@sc{Set Direction Flag}
@deftypefn {Function} ssize_t x86_emit_std (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec STOSB/STOSW/STOSD/STOSQ
@sc{Store String}
@deftypefn {Function} ssize_t x86_emit_stosb (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_stosw (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_stosd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_stosq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec XLAT/XLATB
@sc{Translate Table Index}
@deftypefn {Function} ssize_t x86_emit_xlatb (x86_insn_t* @var{insn})
@end deftypefn

@page
@subsection System instructions

@unnumberedsubsubsec CLGI
@sc{Clear Global Interrupt Flag}
@deftypefn {Function} ssize_t x86_emit_clgi (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CLI
@sc{Clear Interrupt Flag}
@deftypefn {Function} ssize_t x86_emit_cli (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec CLTS
@sc{Clear Task-Switched Flag in CR0}
@deftypefn {Function} ssize_t x86_emit_clts (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec HLT
@sc{Halt}
@deftypefn {Function} ssize_t x86_emit_hlt (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec INT3
@sc{Interrupt to Debug Vector}
@deftypefn {Function} ssize_t x86_emit_int3 (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec INVD
@sc{Invalidate Caches}
@deftypefn {Function} ssize_t x86_emit_invd (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec INVLPGA
@sc{Invalidate TLB Entry in a Specified ASID}
@deftypefn {Function} ssize_t x86_emit_invlpga (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec IRET/IRETD/IRETQ
@sc{Return from Interrupt}
@deftypefn {Function} ssize_t x86_emit_iret (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_iretd (x86_insn_t* @var{insn})
@end deftypefn
@deftypefn {Function} ssize_t x86_emit_iretq (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec MONITOR
@sc{Setup Monitor Address}
@deftypefn {Function} ssize_t x86_emit_monitor (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec MWAIT
@sc{Monitor Wait}
@deftypefn {Function} ssize_t x86_emit_mwait (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec RDMSR
@sc{Read Model-Specific Register}
@deftypefn {Function} ssize_t x86_emit_rdmsr (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec RDPMC
@sc{Read Performance-Monitoring Counter}
@deftypefn {Function} ssize_t x86_emit_rdpmc (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec RDTSC
@sc{Read Time-Stamp Counter}
@deftypefn {Function} ssize_t x86_emit_rdtsc (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec RDTSCP
@sc{Read Time-Stamp Counter and Processor ID}
@deftypefn {Function} ssize_t x86_emit_rdtscp (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec RSM
@sc{Resume from System Management Mode}
@deftypefn {Function} ssize_t x86_emit_rsm (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SKINIT
@sc{Secure Init and Jump with Attestation}
@deftypefn {Function} ssize_t x86_emit_skinit (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec STI
@sc{Set Interrupt Flag}
@deftypefn {Function} ssize_t x86_emit_sti (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec STGI
@sc{Set Global Interrupt Flag}
@deftypefn {Function} ssize_t x86_emit_stgi (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SWAPGS
@sc{Swap GS Register with KernelGSbase MSR}
@deftypefn {Function} ssize_t x86_emit_swapgs (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SYSCALL
@sc{Fast System Call}
@deftypefn {Function} ssize_t x86_emit_syscall (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SYSENTER
@sc{System Call}
@deftypefn {Function} ssize_t x86_emit_sysenter (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SYSEXIT
@sc{System Return}
@deftypefn {Function} ssize_t x86_emit_sysexit (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec SYSRET
@sc{Fast System Return}
@deftypefn {Function} ssize_t x86_emit_sysret (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec UD2
@sc{Undefined Operation}
@deftypefn {Function} ssize_t x86_emit_ud2 (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec VMLOAD
@sc{Load State from VMCB}
@deftypefn {Function} ssize_t x86_emit_vmload (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec VMMCALL
@sc{Call VMM}
@deftypefn {Function} ssize_t x86_emit_vmmcall (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec VMRUN
@sc{Run Virtual Machine}
@deftypefn {Function} ssize_t x86_emit_vmrun (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec VMSAVE
@sc{Save State to VMCB}
@deftypefn {Function} ssize_t x86_emit_vmsave (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec WBINVD
@sc{Writeback and Invalidate Caches}
@deftypefn {Function} ssize_t x86_emit_wbinvd (x86_insn_t* @var{insn})
@end deftypefn

@unnumberedsubsubsec WRMSR
@sc{Write to Model-Specific Register}
@deftypefn {Function} ssize_t x86_emit_wrmsr (x86_insn_t* @var{insn})
@end deftypefn

@comment *********************************************************************

@node Concept Index
@unnumbered Concept Index
@printindex cp

@comment *********************************************************************

@node Function and Type Index
@unnumbered Function and Type Index
@printindex fn

@comment *********************************************************************

@bye
