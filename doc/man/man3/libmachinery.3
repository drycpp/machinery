.TH libmachinery 3 "April 2011" "Machinery 0\&.0\&.0" "Machinery Manual"
.
.SH NAME
libmachinery \- toolchain machinery for code generation
.
.SH SYNOPSIS
.B #include <machinery.h>
.
.SH DESCRIPTION
\fBlibmachinery\fP provides toolchain machinery for compilers, code
generators, assemblers, linkers, and emulators.
.
.SS ARM code generation
.
ARM support has not been implemented as yet.
.
.PP
.B #include <machinery/arm.h>
.
.SS MIPS code generation
.
Basic code generation targeting the MIPS32 and MIPS64 instruction sets is
supported.
.
.PP
.B #include <machinery/mips.h>
.
.TP
.B enum mips_reg_t
MIPS register number (0..31).
.br
  \fIConstant                Mnemonic        Number\fP
  \fBMIPS_REG_ZERO\fP           $zero           0
  \fBMIPS_REG_AT\fP             $at             1
  \fBMIPS_REG_V0\fP             $v0             2
  \fBMIPS_REG_V1\fP             $v1             3
  \fBMIPS_REG_A0\fP             $a0             4
  \fBMIPS_REG_A1\fP             $a1             5
  \fBMIPS_REG_A2\fP             $a2             6
  \fBMIPS_REG_A3\fP             $a3             7
  \fBMIPS_REG_T0\fP             $t0             8
  \fBMIPS_REG_T1\fP             $t1             9
  \fBMIPS_REG_T2\fP             $t2             10
  \fBMIPS_REG_T3\fP             $t3             11
  \fBMIPS_REG_T4\fP             $t4             12
  \fBMIPS_REG_T5\fP             $t5             13
  \fBMIPS_REG_T6\fP             $t6             14
  \fBMIPS_REG_T7\fP             $t7             15
  \fBMIPS_REG_S0\fP             $s0             16
  \fBMIPS_REG_S1\fP             $s1             17
  \fBMIPS_REG_S2\fP             $s2             18
  \fBMIPS_REG_S3\fP             $s3             19
  \fBMIPS_REG_S4\fP             $s4             20
  \fBMIPS_REG_S5\fP             $s5             21
  \fBMIPS_REG_S6\fP             $s6             22
  \fBMIPS_REG_S7\fP             $s7             23
  \fBMIPS_REG_T8\fP             $t8             24
  \fBMIPS_REG_T9\fP             $t9             25
  \fBMIPS_REG_K0\fP             $k0             26
  \fBMIPS_REG_K1\fP             $k1             27
  \fBMIPS_REG_GP\fP             $gp             28
  \fBMIPS_REG_SP\fP             $sp             29
  \fBMIPS_REG_FP\fP             $fp             30
  \fBMIPS_REG_RA\fP             $ra             31
.
.TP
.B struct mips_r_insn_t
MIPS R-format instruction (4 bytes).
.TP
.B struct mips_i_insn_t
MIPS I-format instruction (4 bytes).
.TP
.B struct mips_j_insn_t
MIPS J-format instruction (4 bytes).
.TP
.B union mips_insn_t
MIPS R/I/J-format instruction (4 bytes).
.LP
.
.B ssize_t mips_emit_nop(mips_insn_t* \fIinsn\fP);
.br
.B ssize_t mips_emit_ssnop(mips_insn_t* \fIinsn\fP);
.br
.B ssize_t mips_emit_sync(mips_insn_t* \fIinsn\fP);
.br
.B ssize_t mips_emit_add(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_addu(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_addi(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_imm_t \fIimm\fP);
.br
.B ssize_t mips_emit_addiu(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_imm_t \fIimm\fP);
.br
.B ssize_t mips_emit_sub(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_subu(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_mult(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_multu(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_mul(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_div(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_divu(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_and(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_or(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_xor(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_nor(mips_insn_t* \fIinsn\fP, mips_reg_t \fIrd\fP, mips_reg_t \fIrs\fP, mips_reg_t \fIrt\fP);
.br
.B ssize_t mips_emit_j(mips_insn_t* \fIinsn\fP, mips_addr_t \fItarget\fP);
.br
.B ssize_t mips_emit_jal(mips_insn_t* \fIinsn\fP, mips_addr_t \fItarget\fP);
.
.SS PowerPC code generation
.
PowerPC support has not been implemented as yet.
.
.PP
.B #include <machinery/ppc.h>
.
.SS SPARC code generation
.
SPARC support has not been implemented as yet.
.
.PP
.B #include <machinery/sparc.h>
.
.SS x86 code generation
.
Basic code generation targeting the x86 and x86-64 instruction sets is
supported.
.
.PP
.B #include <machinery/x86.h>
.
.TP
.B union x86_insn_t
x86 instruction (1 to 15 bytes).
.LP
.
.br
.B ssize_t x86_emit_nop(x86_insn_t* \fIinsn\fP);
.
.SH EXAMPLES
.EX
TODO
.EE
.
.SH SEE ALSO
.BR machinery (7)
